-- MySQL Script generated by MySQL Workbench
-- Fri Oct 21 20:07:09 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS,
  UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS,
  FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE,
  SQL_MODE = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
-- -----------------------------------------------------
-- Schema CEBS_db
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema CEBS_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `CEBS_db` DEFAULT CHARACTER SET utf8;
USE `CEBS_db`;
SET SQL_MODE = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS = @OLD_UNIQUE_CHECKS;
-- -----------------------------------------------------
-- Table `CEBS_db`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`User` (
  `user_id` INT NOT NULL COMMENT 'The id of the user for use within the system. ',
  `login_status` TINYINT NOT NULL COMMENT 'Whether or not the user is signed in.',
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `account_type` INT NOT NULL COMMENT 'The type of account, referencing the User Types table. ',
  PRIMARY KEY (`user_id`),
  INDEX `type_id_idx` (`account_type` ASC)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Customers` (
  `customer_id` INT NOT NULL COMMENT 'the customer\'s id for refrence within the system. ',
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `status` INT NOT NULL COMMENT 'The status of the customer\'s account',
  `user_id` INT NOT NULL COMMENT 'The user associated with this customer account.',
  `num_cards` INT NOT NULL COMMENT 'The number of credit cards associated with this customer, max of 3.',
  PRIMARY KEY (`customer_id`),
  INDEX `account_status_idx` (`status` ASC),
  INDEX `user_idx` (`user_id` ASC),
  UNIQUE INDEX `customer_id_UNIQUE` (`customer_id` ASC)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Credit Cards`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Credit Cards` (
  `card_id` INT NOT NULL COMMENT 'The id for the card within the db\n',
  `card_number` INT NOT NULL COMMENT 'The encrypted ccv',
  `ccv` SMALLINT(3) NOT NULL COMMENT 'The ccv of the credit card',
  `expiration` DATETIME NOT NULL COMMENT 'the credit card\'s expiration date',
  `billingAddress` VARCHAR(256) NOT NULL COMMENT 'The billing address associated with this card\n',
  `customer_id` INT NOT NULL COMMENT 'The customer this card is associated with.',
  PRIMARY KEY (`card_id`),
  INDEX `customer_id_idx` (`customer_id` ASC),
  UNIQUE INDEX `card_id_UNIQUE` (`card_id` ASC)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Movie Categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Movie Categories` (
  `category_id` INT NOT NULL COMMENT 'The numerical representation of the rating system for use in the database.',
  `Category` VARCHAR(45) NOT NULL COMMENT 'The string value of the ratings. ',
  PRIMARY KEY (`category_id`)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Ratings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Ratings` (
  `ratings_id` INT NOT NULL COMMENT 'The numerical ratings values, to be referenced by other tables. ',
  `ratings_name` VARCHAR(32) NOT NULL COMMENT 'The string representation of the ratings.',
  PRIMARY KEY (`ratings_id`)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Movies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Movies` (
  `movie_id` INT NOT NULL COMMENT 'The movie id for use within the system. ',
  `title` VARCHAR(45) NOT NULL COMMENT 'The title of the movie',
  `cast_members` VARCHAR(1024) NOT NULL,
  `director` VARCHAR(45) NOT NULL,
  `producer` VARCHAR(45) NOT NULL,
  `Synopsis` VARCHAR(500) NOT NULL,
  `trailerLink` VARCHAR(256) NOT NULL,
  `category` INT NOT NULL COMMENT 'The genre of the movie, referenced to the category table. ',
  `rating` INT NOT NULL COMMENT 'The rating of the movie, referencing the ratings table',
  PRIMARY KEY (`movie_id`),
  INDEX `category_idx` (`category` ASC),
  INDEX `rating_idx` (`rating` ASC),
  CONSTRAINT `category` FOREIGN KEY (`category`) REFERENCES `CEBS_db`.`Movie Categories` (`category_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `rating` FOREIGN KEY (`rating`) REFERENCES `CEBS_db`.`Ratings` (`ratings_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Promotions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Promotions` (
  `promotion_id` INT NOT NULL COMMENT 'The id for the promotion, to be referenced when a promo code is used.',
  `code` VARCHAR(32) NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  PRIMARY KEY (`promotion_id`)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Showroom`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Showroom` (
  `room_id` INT NOT NULL COMMENT 'The room id for reference within the db',
  `open` TINYINT NOT NULL COMMENT 'A boolean determing whether or not the room is available for use. ',
  `room_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`room_id`),
  UNIQUE INDEX `room_id_UNIQUE` (`room_id` ASC)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Showing`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Showing` (
  `showing_id` INT NOT NULL COMMENT 'The id of the showing for reference within the system. ',
  `date` DATETIME NOT NULL,
  `time` DATETIME NOT NULL,
  `duration` DATETIME NOT NULL,
  `movie` INT NOT NULL COMMENT 'The id of the movie associated with this showing.',
  `show_room` INT NOT NULL COMMENT 'The id of the showroom this movie is being shown in. ',
  PRIMARY KEY (`showing_id`),
  INDEX `movie_idx` (`movie` ASC),
  INDEX `showroom_idx` (`show_room` ASC),
  CONSTRAINT `movie` FOREIGN KEY (`movie`) REFERENCES `CEBS_db`.`Movies` (`movie_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `showroom` FOREIGN KEY (`show_room`) REFERENCES `CEBS_db`.`Showroom` (`room_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`TicketTypes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`TicketTypes` (
  `type_id` INT NOT NULL COMMENT 'The id for the ticket types for use within the system',
  `ticket_types` VARCHAR(45) NOT NULL COMMENT 'The string representation of the ticket types, child, adult, and senior.',
  PRIMARY KEY (`type_id`)
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `CEBS_db`.`Ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Ticket` (
  `ticket_id` INT NOT NULL COMMENT 'The id for the ticket, for use within the system.',
  `price` DECIMAL NOT NULL,
  `redeemed` TINYINT NOT NULL COMMENT 'A boolean to check if a ticket is redeemed or not, cannot be returned if it has been redeemed.',
  `ticket_type` INT NOT NULL COMMENT 'The ticket type from the Ticket Types table.',
  `booking` INT NOT NULL COMMENT 'The booking the ticket is associated with',
  PRIMARY KEY (`ticket_id`),
  INDEX `ticket_type_idx` (`ticket_type` ASC),
  INDEX `booking_idx` (`booking` ASC),
  CONSTRAINT `ticket_type` FOREIGN KEY (`ticket_type`) REFERENCES `CEBS_db`.`TicketTypes` (`type_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE = InnoDB;