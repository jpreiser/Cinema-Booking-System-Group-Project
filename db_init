-- MySQL Script generated by MySQL Workbench
-- Wed Dec  7 16:27:26 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema CEBS_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema CEBS_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `CEBS_db` DEFAULT CHARACTER SET utf8 ;
USE `CEBS_db` ;

-- -----------------------------------------------------
-- Table `CEBS_db`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`User` (
  `user_id` INT NOT NULL COMMENT 'The id of the user for use within the system. ',
  `login_status` TINYINT NOT NULL COMMENT 'Whether or not the user is signed in.',
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `account_type` INT NOT NULL COMMENT 'The type of account, referencing the User Types table. ',
  PRIMARY KEY (`user_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`account_status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`account_status` (
  `status_id` INT NOT NULL COMMENT 'The id types for the three kinds of account statuses. 0 for active, 1 for inactive, 2 for deleted\n',
  `status_name` VARCHAR(45) NULL COMMENT 'The names for the kinds of account types. ',
  PRIMARY KEY (`status_id`),
  UNIQUE INDEX `status_id_UNIQUE` (`status_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`Customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Customers` (
  `customer_id` INT NOT NULL COMMENT 'the customer\'s id for refrence within the system. ',
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `status` INT NOT NULL COMMENT 'The status of the customer\'s account',
  `user_id` INT NOT NULL COMMENT 'The user associated with this customer account.',
  `num_cards` INT NOT NULL COMMENT 'The number of credit cards associated with this customer, max of 3.',
  PRIMARY KEY (`customer_id`),
  INDEX `account_status_idx` (`status` ASC) VISIBLE,
  INDEX `user_idx` (`user_id` ASC) VISIBLE,
  UNIQUE INDEX `customer_id_UNIQUE` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `account_status`
    FOREIGN KEY (`status`)
    REFERENCES `CEBS_db`.`account_status` (`status_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `userid`
    FOREIGN KEY (`user_id`)
    REFERENCES `CEBS_db`.`User` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`credit_cards`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`credit_cards` (
  `card_id` INT NOT NULL COMMENT 'The id for the card within the db\n',
  `card_number` VARCHAR(256) NOT NULL COMMENT 'The encrypted cc#',
  `ccv` SMALLINT(3) NOT NULL COMMENT 'The ccv of the credit card',
  `expiration` DATETIME NOT NULL COMMENT 'the credit card\'s expiration date',
  `billingAddress` VARCHAR(256) NOT NULL COMMENT 'The billing address associated with this card\n',
  `customer_id` INT NOT NULL COMMENT 'The customer this card is associated with.',
  PRIMARY KEY (`card_id`),
  INDEX `customer_id_idx` (`customer_id` ASC) VISIBLE,
  UNIQUE INDEX `card_id_UNIQUE` (`card_id` ASC) VISIBLE,
  CONSTRAINT `customer_id`
    FOREIGN KEY (`customer_id`)
    REFERENCES `CEBS_db`.`Customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`categories` (
  `category_id` INT NOT NULL COMMENT 'The numerical representation of the rating system for use in the database.',
  `Category` VARCHAR(45) NOT NULL COMMENT 'The string value of the ratings. ',
  PRIMARY KEY (`category_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`Movies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Movies` (
  `movie_id` INT NOT NULL COMMENT 'The movie id for use within the system. ',
  `title` VARCHAR(45) NOT NULL COMMENT 'The title of the movie',
  `cast_members` VARCHAR(1024) NOT NULL,
  `director` VARCHAR(45) NOT NULL,
  `producer` VARCHAR(45) NOT NULL,
  `Synopsis` VARCHAR(500) NOT NULL,
  `trailerLink` VARCHAR(256) NOT NULL,
  `category` INT NOT NULL COMMENT 'The genre of the movie, referenced to the category table. ',
  `rating` INT NOT NULL COMMENT 'The rating of the movie, referencing the ratings table',
  PRIMARY KEY (`movie_id`),
  INDEX `category_idx` (`category` ASC) VISIBLE,
  CONSTRAINT `category`
    FOREIGN KEY (`category`)
    REFERENCES `CEBS_db`.`categories` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`Showroom`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Showroom` (
  `room_id` INT NOT NULL COMMENT 'The room id for reference within the db',
  `open` TINYINT NOT NULL COMMENT 'A boolean determing whether or not the room is available for use. ',
  `room_type` VARCHAR(45) NOT NULL,
  `no_of_seats` INT NOT NULL,
  PRIMARY KEY (`room_id`),
  UNIQUE INDEX `room_id_UNIQUE` (`room_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`Showing`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Showing` (
  `showing_id` INT NOT NULL COMMENT 'The id of the showing for reference within the system. ',
  `date` DATETIME NOT NULL,
  `time` DATETIME NOT NULL,
  `duration` DATETIME NOT NULL,
  `movie` INT NOT NULL COMMENT 'The id of the movie associated with this showing.',
  `show_room` INT NOT NULL COMMENT 'The id of the showroom this movie is being shown in. ',
  PRIMARY KEY (`showing_id`),
  INDEX `movie_idx` (`movie` ASC) VISIBLE,
  INDEX `showroom_idx` (`show_room` ASC) VISIBLE,
  CONSTRAINT `movie`
    FOREIGN KEY (`movie`)
    REFERENCES `CEBS_db`.`Movies` (`movie_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `showroom`
    FOREIGN KEY (`show_room`)
    REFERENCES `CEBS_db`.`Showroom` (`room_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`Promotions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Promotions` (
  `promotion_id` INT NOT NULL COMMENT 'The id for the promotion, to be referenced when a promo code is used.',
  `code` VARCHAR(32) NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  PRIMARY KEY (`promotion_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`booking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`booking` (
  `booking_id` INT NOT NULL COMMENT 'The id for a specific booking\n',
  `ticket_count` INT NOT NULL COMMENT 'The number of tickets associated with this booking\n',
  `paid` TINYINT NOT NULL COMMENT 'Whether or not this booking has been paid for.',
  `promtionEntered` INT NOT NULL COMMENT 'Which promotion has been entered, if any. ',
  `customer` INT NOT NULL COMMENT 'The customer associated with this booking.',
  `Show_id` INT NOT NULL,
  `total_price` FLOAT NOT NULL,
  PRIMARY KEY (`booking_id`),
  INDEX `promotion_idx` (`promtionEntered` ASC) VISIBLE,
  INDEX `customer_idx` (`customer` ASC) VISIBLE,
  UNIQUE INDEX `booking_id_UNIQUE` (`booking_id` ASC) VISIBLE,
  INDEX `show_id_idx` (`Show_id` ASC) VISIBLE,
  CONSTRAINT `promotion`
    FOREIGN KEY (`promtionEntered`)
    REFERENCES `CEBS_db`.`Promotions` (`promotion_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `customer`
    FOREIGN KEY (`customer`)
    REFERENCES `CEBS_db`.`Customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `show_id`
    FOREIGN KEY (`Show_id`)
    REFERENCES `CEBS_db`.`Showing` (`showing_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`Ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`Ticket` (
  `ticket_id` INT NOT NULL COMMENT 'The id for the ticket, for use within the system.',
  `price` DECIMAL NOT NULL,
  `redeemed` TINYINT NOT NULL COMMENT 'A boolean to check if a ticket is redeemed or not, cannot be returned if it has been redeemed.',
  `ticket_type` INT NOT NULL COMMENT 'The ticket type from the Ticket Types table.',
  `booking` INT NOT NULL COMMENT 'The booking the ticket is associated with',
  PRIMARY KEY (`ticket_id`),
  INDEX `booking_idx` (`booking` ASC) VISIBLE,
  CONSTRAINT `booking`
    FOREIGN KEY (`booking`)
    REFERENCES `CEBS_db`.`booking` (`booking_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`archived_movies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`archived_movies` (
  `archive_id` INT NOT NULL COMMENT 'The id for the movie within the archive table.',
  `movie_id` INT NOT NULL COMMENT 'The id of the movie that has been archived.',
  PRIMARY KEY (`archive_id`),
  INDEX `movie_id_idx` (`movie_id` ASC) VISIBLE,
  UNIQUE INDEX `archive_id_UNIQUE` (`archive_id` ASC) VISIBLE,
  CONSTRAINT `movie_id`
    FOREIGN KEY (`movie_id`)
    REFERENCES `CEBS_db`.`Movies` (`movie_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`ShowSeat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`ShowSeat` (
  `idShowSeat` INT NOT NULL,
  `showroom_id` INT NOT NULL,
  `purchased` INT NOT NULL,
  PRIMARY KEY (`idShowSeat`),
  INDEX `showroom_id_idx` (`showroom_id` ASC) VISIBLE,
  CONSTRAINT `showroom_id`
    FOREIGN KEY (`showroom_id`)
    REFERENCES `CEBS_db`.`Showroom` (`room_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CEBS_db`.`ShowTime`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CEBS_db`.`ShowTime` (
  `showtime_id` INT NOT NULL,
  `showroom` INT NOT NULL,
  PRIMARY KEY (`showtime_id`),
  INDEX `showroom_id_idx` (`showroom` ASC) VISIBLE,
  CONSTRAINT `showroom_id`
    FOREIGN KEY (`showroom`)
    REFERENCES `CEBS_db`.`Showroom` (`room_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
